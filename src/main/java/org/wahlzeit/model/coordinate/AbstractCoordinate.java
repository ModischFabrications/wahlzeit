package org.wahlzeit.model.coordinate;

public abstract class AbstractCoordinate implements Coordinate {

    static boolean similar(double d1, double d2) {
        double d = d1 / d2;
        return (Math.abs(d - 1.0) < 0.001);
    }

    @Override
    public CartesianCoordinate asCartesianCoordinate() {
        CartesianCoordinate cartesianCoordinate = this.asSphericCoordinate().doAsCartesianCoordinate();

        // postcondition
        cartesianCoordinate.assertClassInvariants();
        return cartesianCoordinate;
    }

    @Override
    public SphericCoordinate asSphericCoordinate() {
        SphericCoordinate sphericCoordinate = this.asCartesianCoordinate().doAsSphericCoordinate();

        // postcondition
        sphericCoordinate.assertClassInvariants();
        return sphericCoordinate;
    }

    @Override
    public double getCartesianDistance(Coordinate other) {
        double d = this.asCartesianCoordinate().doGetDistance(other.asCartesianCoordinate());

        // postcondition
        assert !Double.isNaN(d);
        return d;
    }

    /**
     * uses haversine formula, has some rounding errors
     */
    @Override
    public double getCentralAngle(Coordinate other) {
        SphericCoordinate sOther = other.asSphericCoordinate();

        double angle = this.asSphericCoordinate().doGetAngle(sOther);

        assert !Double.isNaN(angle);
        return angle;
    }

    @Override
    public boolean equals(Object o) {
        // generated by IntelliJ
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Coordinate that = (Coordinate) o;

        return this.isEqual(that);
    }

    /**
     * uses impl of cartesian, see that one for explanations
     */
    @Override
    public boolean isEqual(Coordinate other) {
        // could be implemented directly (without Cartesian)
        // without many problems if one desires to do so
        return this.isSimilar(other);
    }

    protected boolean isSimilar(Coordinate other) {
        return this.asCartesianCoordinate().isSimilar(other.asCartesianCoordinate());
    }

    abstract protected void assertClassInvariants();
}
