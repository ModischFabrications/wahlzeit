package org.wahlzeit.model;

import java.util.Objects;

public class SphericCoordinate implements Coordinate {
    private final double phi;
    private final double theta;
    private final double radius;

    /**
     * everything in radians!
     */
    public SphericCoordinate(double phi, double theta, double radius) {
        this.phi = phi;
        this.theta = theta;
        this.radius = radius;
    }

    @Override
    public CartesianCoordinate asCartesianCoordinate() {
        // seems to be this conversion. Be aware that it has a different notation!
        // p -> radius
        // https://en.wikipedia.org/wiki/List_of_common_coordinate_transformation

        double x = radius * Math.sin(theta) * Math.cos(phi);
        double y = radius * Math.sin(theta) * Math.sin(phi);
        double z = radius * Math.cos(theta);

        return new CartesianCoordinate(x, y, z);
    }

    /**
     * uses impl of cartesian, see that one for explanations
     */
    @Override
    public double getCartesianDistance(Coordinate other) {
        return this.asCartesianCoordinate().getCartesianDistance(other);
    }

    @Override
    public SphericCoordinate asSphericCoordinate() {
        return this;
    }

    @Override
    public double getCentralAngle(Coordinate other) {
        // FIXME: calculation

        // https://en.wikipedia.org/wiki/Great-circle_distance

        return 99;
    }

    /**
     * uses impl of cartesian, see that one for explanations
     */
    @Override
    public boolean isEqual(Coordinate other) {
        // could be implemented directly (without Cartesian)
        // without many problems if one desires to do so
        return this.asCartesianCoordinate().isEqual(other);
    }

    @Override
    public boolean equals(Object o) {
        // generated by IntelliJ
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SphericCoordinate that = (SphericCoordinate) o;

        return this.isEqual(that);
    }

    @Override
    public int hashCode() {
        return Objects.hash(phi, theta, radius);
    }

    public double getPhi() {
        return phi;
    }

    public double getTheta() {
        return theta;
    }

    public double getRadius() {
        return radius;
    }
}
